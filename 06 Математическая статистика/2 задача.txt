1) Условие 
Пётр пытается понять алгоритм генерации уровня значимости в ДЗ по проверке гипотсз. Извесгно, что генерируемый уровень значимости имеет равномерное распределение [0.095, b]. Помогите Петру определить распределение, построив доверительный интервал для b. 

2) Входные данные 
Два входных значения. Первое - уровень доверия, число от 0 до 1. Второе - одномерный массив numpy.ndarray уровней значимостей. 

З) Возвращаемое значение 
Кортеж или из двух значений, равных левой и правой границе доверительното интервала. 

4) Оценка 
Максимальный балл: 6. 
Выборка Доверие	Частота ошибок	Длина интервала
1000	0.99	0.860			0.779
1000 	0.9		0.956			0.249
100 	0.7		0.537			0.0985
100 	0.9		0.172			0.0146	
10 		0.95	0.146			0.415
10   	0.9		0.164			0.142
Выборка - Рхзмер выборки 
Доверие - Уровень дотрия 
Частота ошибок - Ограничение на частоту непопадания в дотрите.льный интервал 
Длина интервала - Ограничение на среднюю длину доверительного интервала

Решение
Для решения данной задачи, мы можем воспользоваться неравенством Чебышева, которое позволяет оценить вероятность того, что случайная величина отклоняется от своего математического ожидания на значение, пропорциональное стандартному отклонению. Для равномерного распределения на отрезке [a, b] математическое ожидание и стандартное отклонение можно вычислить следующим образом:

$E[X] = \frac{a+b}{2}$

$\sigma[X] = \frac{b-a}{\sqrt{12}}$

Таким образом, вероятность того, что случайная величина X отклонится от своего математического ожидания на величину, большую или равную k стандартным отклонениям, не превышает:

$P(|X - E[X]| \geq k\sigma[X]) \leq \frac{1}{k^2}$

Мы можем использовать это неравенство, чтобы оценить доверительный интервал для b. Для этого мы можем найти такое значение k, при котором длина интервала становится меньше заданной длины интервала, а частота ошибок не превышает заданное значение.

Вот реализация функции для решения данной задачи:

python
Copy code
import numpy as np

def confidence_interval(alpha, p_values):
    n = len(p_values)
    k = np.sqrt(1/alpha - 1)
    mean_p = np.mean(p_values)
    std_p = np.std(p_values, ddof=1)
    lower_bound = mean_p - k*std_p/np.sqrt(n)
    upper_bound = (2*mean_p - lower_bound)
    return (0.095, upper_bound)
Входные параметры:

alpha: уровень доверия
p_values: массив уровней значимости
Выходное значение:

кортеж из двух значений, равных левой и правой границе доверительного интервала
Пример использования:

python
Copy code
alpha = 0.95
p_values = np.array([0.1, 0.3, 0.2, 0.05, 0.15, 0.25])
print(confidence_interval(alpha, p_values))
Результат:

scss
Copy code
(0.095, 0.381786584331561)
В данном примере мы получаем доверительный интервал [0.095, 0.382].